name: Build and Release

on:
  release:
    types: [created]

jobs:
  build-windows-msvc:
    name: Build Windows (MSVC)
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: latest

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1.13.0

      - name: Cache build dependencies
        uses: actions/cache@v4
        with:
          path: |
            build/_deps
            build/CMakeFiles
            external
          key: ${{ runner.os }}-msvc-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-msvc-

      - name: Configure CMake
        run: |
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: |
          cmake --build build --config Release

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts/windows
          xcopy /E /I build\Release\*.exe artifacts\windows\
          xcopy /E /I build\Release\*.dll artifacts\windows\
          if exist assets xcopy /E /I assets artifacts\windows\assets\

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dungeon-windows
          path: artifacts/windows

      - name: Upload to release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/windows/**/*

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build

      - name: Cache build dependencies
        uses: actions/cache@v4
        with:
          path: |
            build/_deps
            build/CMakeFiles
            external
          key: ${{ runner.os }}-gcc-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-gcc-

      - name: Configure CMake
        run: |
          cmake -B build -S . -G Ninja -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: |
          cmake --build build --config Release

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts/linux
          # Fix the cp commands to handle directories correctly
          # Try both potential executable locations
          if [ -f "build/Release/${PROJECT_NAME}" ]; then
            cp build/Release/${PROJECT_NAME} artifacts/linux/
          elif [ -f "build/${PROJECT_NAME}" ]; then
            cp build/${PROJECT_NAME} artifacts/linux/
          fi
          # Copy shared libraries if they exist
          find build -name "*.so" -exec cp {} artifacts/linux/ \; || echo "No .so files found"
          # Copy assets directory if it exists
          if [ -d "assets" ]; then
            cp -r assets artifacts/linux/
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dungeon-linux
          path: artifacts/linux

      - name: Upload to release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/linux/**/*
